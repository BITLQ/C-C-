 模板参数模拟实现队列

#include<iostream>

using namespace std;

template<typename T>
struct Node
{
	Node(const T& d)
		:_next(NULL)
		,_prev(NULL)
		,_data(d)
	{}

	T _data;
	Node<T>* _next;
	Node<T>* _prev;
};

template<typename T>
class LinkList
{
public:
	LinkList ()
		:_head(NULL)
		,_tail(NULL)
	{}

	~LinkList ()
	{
		Node<T>* cur =_head;

		while(cur)
		{
			Node<T>* tmp = cur;
			cur = cur->_next ;
			delete tmp;
		}

		_head = _tail = NULL;
	}

	void PushBack(const T& data);
	void PushFront(const T& data);
	void PopBack();
	void PopFront();
	void Remove(const T& data);
	void RemoveAll(const T& data);
	void Sort();
	void Display();
	Node<T>* GetHead()
	{
		return _head;
	}
private:

	Node<T>* _head;
	Node<T>* _tail;
};

template<typename T>
void LinkList<T>::PushBack(const T& data)
{
	Node<T>* pNode = new Node<T>(data);
	if(_head==NULL)
	{
		_head = _tail = pNode; 
	}
	else
	{
		_tail->_next = pNode;
		pNode->_prev = _tail;
		_tail = pNode ;
	}
}

template<typename T>
void LinkList <T>::PushFront(const T& data)
{
	Node<T>* pNode = new Node<T>(data);

	if(_head==NULL)
	{
		_head = _tail = pNode;
	}
	else
	{
		pNode->_next = _head;
		_head->_prev = pNode;
		_head = pNode;
	}
}

template<typename T>
void LinkList <T>::PopBack ()
{
	if(_head==NULL)
		return;
	else if(_head->_next == NULL)
	{
		delete _head;
		_head = _tail = NULL;
	}
	else
	{
		Node<T>* tmp = _tail;
	    _tail = _tail->_prev ;
	    _tail->_next = NULL;
	    delete tmp;
	}
}

template<typename T>
void LinkList <T>::PopFront ()
{
	if(_head==NULL)
		return;
	Node<T>* tmp = _head;
	_head->_prev = NULL;
	_head = _head->_next ;
	delete tmp;
}

template<typename T>
void LinkList <T>::Remove (const T& data)
{
	Node<T>* cur = _head;

	while(cur)
	{
		if(cur->_data == data)
		{
			if(cur->_prev == NULL)
			{
				PopFront ();
			}
			else if(cur->_next == NULL)
			{
				PopBack ();
			}
			else
			{
				Node<T>* t = cur;
				cur->_next ->_prev = cur->_prev ;
				cur->_prev ->_next = cur->_next ;
				delete t;
			}
			return;
		}
		cur = cur->_next ;
	}
}

template<typename T>
void LinkList<T>::RemoveAll (const T& data)
{
	Node<T>* cur = _head;

	while(cur)
	{

		if(cur->_data == data)
		{
			if(cur == _head)
			{
				cur = cur->_next ;
				PopFront ();
				
			}
			else if(cur->_next == NULL)
			{
				PopBack ();
				cur = NULL;
				break;
			}
			else
			{

				/*Node<T>* t = cur->_next;
				cur->_next ->_prev = cur->_prev ;
				cur->_prev ->_next = cur->_next ;
				delete cur;
				cur = t;*/
				cur->_data = _tail->_data ;
				PopBack();
			}
		}
		else
			cur = cur->_next ;
	}
}

template<typename T>
void LinkList <T>::Sort ()
{
	//链表的冒泡排序；

   Node<T>* cur = NULL;
   Node<T>* teil = NULL;

	cur = _head ;

	while(cur != teil)
	{
		while(cur->_next != teil)
		{
			if(cur->_data > cur->_next ->_data )
			{
				T tmp = cur->_data ;
				cur->_data = cur->_next ->_data ;
				cur->_next ->_data = tmp;
			}
			cur = cur->_next ;
		}
		teil = cur;
		cur = _head;
	}
	return ;
}

template<typename T>
void LinkList<T>::Display()
{
	Node<T>* tmp = _head;

	while(tmp)
	{
		cout<<tmp->_data<<"  ";
		tmp = tmp->_next;
	}
	cout<<endl;
}

template<typename T,typename Container>
class Queue
{
public:
	bool Empty()
	{
		return _con.GetHead() == NULL;
	}
	Node<T>& Front()
	{
		return *_con.GetHead();  
	}
	void Back(const T& data)
	{
		
	}
	void Push(const T& data)
	{
		_con.PushBack(data);
	}
	void Pop()
	{
		_con.PopFront();
	}
	void Dispaly()
	{
		while(!Empty())
		{
			cout<<Front()._data<<endl;
			Pop(); 
		}
	}
private:
	Container _con;
};

void test1()
{
	Queue<int , LinkList<int> > s;
	s.Push (1);
	s.Push (1);
	s.Push (1);
	s.Push (2);
	s.Dispaly ();
}

void  test()
{
	LinkList<int> l;
	l.PushBack (1);
	l.PushBack (4);
	l.PushBack (2);
	l.PushBack (1);
	l.PushBack (2);
	l.PushBack (6);
	l.PushFront (4);
	l.Sort ();
	//l.Remove (1);
	//l.RemoveAll (3);
	//l.PopBack ();
	/*l.PopBack ();
	l.PushFront (4);
	l.PopFront ();*/
	l.Display ();

}

int main()
{
	test1();
	system("pause");
	return 0;
}
