//实现一个栈，要求实现Push（入栈）、Pop（出栈）、Min（返回最小值的操作）的时间复杂度为O(1)

#include<iostream>
#include<stack>
#include<cassert>

using namespace std;

template<typename T>
class Stack
{
public:
	void Push(const T& data)
	{
		//如果新元素比栈顶的最小元素都小，则压栈，为什么要压两次呢？
		//因为我们把最小的元素一直保存在栈顶；
		if(s.empty ()|| s.top ()> data)
		{
			s.push (data);
			s.push (data);
		}
		//如果新元素没有栈顶的最小元素小，把新元素直接压栈，然后再把最小元素压栈；
		// 有些疑问前面不是把最小元素压了两次栈吗？  这就要看你怎莫pop元素了；
		else
		{
			T tmp = s.top ();
			s.push(data);
			s.push (tmp);
		}
	}
	// 来看看我们是怎么pop元素的，直接pop两次，把本应该真正的栈顶元素pop掉了，并且把现在
	// 的栈顶最小元素页pop掉了，这样就省去我们还要在这里倒一次的麻烦！（这需要你自己画画理解）
	void Pop()
	{
		s.pop ();
		s.pop ();
	}
	// 我们把最小元素放在栈顶，这是我们设计的，但是给用户的感觉并不是这样的，用户会以为栈顶元素
	// 就应该是最后一次压栈的元素，这就需要对top进行处理了；
	T& min()
	{
		return s.top ();
	}

	// 因为用户看不到我们的实现，所以以为栈顶的元素还是最后入栈的元素，这里就需要我们悄悄的处理
	// 个用户一种没有改变的错觉!
	T Top()
	{
		    assert(!s.empty ());
			T tmp = s.top ();
		    s.pop ();
		    T ret = s.top ();
		    s.push (tmp);
		    return ret;
	}

protected :
	stack<T> s;//自己懒得写的话直接定义一个库里的栈成员变量；
};

int main()
{
	Stack<int> s;

	s.Push (2);
	s.Push (1);
	s.Push (4);
	s.Push (5);

	cout<<s.min ()<<endl;
	cout<<s.Top ()<<endl;

	s.Pop ();

	cout<<endl;
	cout<<s.min ()<<endl;
	cout<<s.Top ()<<endl;

	system("pause");
	return 0;
}
