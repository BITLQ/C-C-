#include<iostream>
#include<cassert>
#include<stack>

using namespace std;

enum op
{
	OP_NUM,
	OP_SYMBOL,
	ADD,
	SUB,
	MIN,
	DIV
};

struct Case
{
	int op_symbol;
	int op_num;
};

// 12 3 4 + * 6 - 8 2 / +
void test()
{
    Case arr[11] = {
		{OP_NUM , 12},
		{OP_NUM , 3},
		{OP_NUM ,4},
		{OP_SYMBOL ,ADD},
		{OP_SYMBOL, MIN},
		{OP_NUM, 6},
		{OP_SYMBOL , SUB},
		{OP_NUM, 8},
		{OP_NUM ,2},
		{OP_SYMBOL , DIV},
		{OP_SYMBOL , ADD}
	};

	int size = sizeof(arr)/sizeof(arr[0]);

	stack<int> s;

	for(int i = 0; i<size; i++)
	{
		if(arr[i].op_symbol == OP_NUM )
		{
			s.push(arr[i].op_num );
		}
		else
		{
			int left = s.top();
				s.pop();
			int right = s.top();
				s.pop ();
			switch(arr[i].op_num)
			{
			case ADD:
				s.push(right+left);
				break;
			case SUB:
				s.push (right-left);
				break;
			case MIN:
				s.push (right*left);
				break;
			case DIV:
				s.push (right/left);
				break;
			default:
				assert(0);
				break;
			}
		}
	}

	cout<<s.top()<<endl;
}

int main()
{
	test();

	system("pause");
	return 0;
}


// STL 库里关于vector和list的调用；

#include<iostream>
#include<vector>
#include<list>

using namespace std;

int main()
{
	vector<int> v;

	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);

	bool ret = v.empty();
	
	list<int> L;

	L.get_allocator();

	system("pause");
	return 0;
}
