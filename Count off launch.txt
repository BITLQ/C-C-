Count off launch

/*有n人围成一圈，顺序排号。从第1个人开始报数（从1到3报数），
凡报到3的人退出圈子，问最后留下的是原来的第几号的那位。

看到这道题的时候我不由自主的想到了约瑟夫环，想到了用链表去解决，但是，细想之下，
时间仓促，因为是在答题，用链表的话有点小题大作，那么便有了下面数组的解决方法！


首先，有N个人，创建一个大小为N的数组，但是如果N是从键盘接收的值，那么就得提前给定一个
大小合适的值，这也是用数组解决这个问题的弊端，然后数组中是我们对n个人的编号，从1-n；

从下标为0编号为1的数组元素开始报数，count统计报数，当count==3时，就代表这个人要推出了；
那么把他的编号置为0，因为编号的时候是从1开始的，没有0，所以我们以编号为0代表退出；

写到这里，我们又不得不回头去考虑count计数的限制条件，因为有了编号为0的元素，所以只有
编号不为0时，count才++；

当然，写到这里，你又会面临两个很尴尬的问题，其一是，循环的数组下标i应该小于n,当遍历到数组小标为n - 1元素时，怎么回去，
毕竟约瑟夫环是一个环，很简单，只要让循环下标 i=0 不就又回去了，是不是很机智；其二是，这个循环的遍历什么时候停止，
这就有好几种方法了，指针，设置标志都可以，我这里采用计数的方式，因为题目要求最后只留一个人，那么，每当count == 3时，
就有一个人退出，这是我么让退出计数m++，当m == n-1时，不就只剩了一个人了；

那么问题就解决了；下面是代码的实现，这是很有意思的一道题；

*/

#include<iostream>

using namespace std;

int main()
{
	int n = 0;
	cin>>n;

	int arr[100];//初始数组

	for(int i = 0; i < n; i++)
		arr[i] = i+1;
	int count = 0;//报数计数
	int m = 0;//退出人数计数

		for(int i = 0; i<n; i++)
		{
			if(arr[i]!=0)
			{
				count++;
				if(m == n - 1)
				{
					cout<<arr[i]<<endl;
					break;
				}
				
				if(count == 3)
				{
					count = 0; 
					m++;
					arr[i] = 0;
				}
				if(i == n - 1)
				{
					i = -1;	
				}
			}
		}

	return 0;
}
